#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Generali AG, Rene Fuehrer <rene.fuehrer@generali.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
import os
import logging
import time
import sys
from sys import stderr
import json
from json import loads
import git

# ------------------------------- CONFIG SECTION - DO NOT EDIT ABOVE THIS LINE -------------------------------

debug_level = "INFO"
config_file = "backup.json"
config_context = "backup"

# ------------------------------- CONFIG SECTION - DO NOT EDIT BELOW THIS LINE -------------------------------

logging.basicConfig(stream=stderr, level=logging.INFO)

timestamp = time.strftime("%Y%m%d-%H%M%S")
mypath = os.path.dirname(os.path.realpath(sys.argv[0]))

try:
    json_file = sys.argv[1] or None
    logging.info(json_file)
    event_type = sys.argv[2] or None
    logging.info(event_type)

    # the function 'hook_functions' is available from the main genvoy repository (https://github.com/generaliinformatik/genvoy)
    from hook_functions import replace_all_placeholders
except Exception:
    logging.error("Required parameters missing. Nothing to do.")
    #    json_file = mypath + "/test/test.json"
    #    event_type = "debug"
    #    from test.hook_functions import replace_all_placeholders
    sys.exit(0)

config_file_plain = os.path.splitext(os.path.basename(__file__))[0]
config_file = mypath + "/" + config_file_plain + ".json"

# config_file = mypath + '/' + config_file
# alternativly you can use 'eventy_type`als a dynamic variable to read configuration settings, e.g.:
#   config_file = mypath + '/'+event_type+'.json'
# or
#   config_file_prefix = os.path.splitext(os.path.basename(__file__))[0]
#   config_file = mypath + '/' + config_file_prefix + '.json'

# Load config
with open(config_file, "r") as cfg:
    config = loads(cfg.read())

debug_level_old = debug_level
debug_level = str(
    replace_all_placeholders("{%s/debug_level}" % (config_context), config, "")
)
if debug_level != debug_level_old:
    if debug_level == "DEBUG":
        logging.getLogger().setLevel(logging.DEBUG)
    elif debug_level == "INFO":
        logging.getLogger().setLevel(logging.INFO)
    elif debug_level == "WARNING":
        logging.getLogger().setLevel(logging.WARNING)
    elif debug_level == "ERROR":
        logging.getLogger().setLevel(logging.ERROR)
    elif debug_level == "CRITICAL":
        logging.getLogger().setLevel(logging.CRITICAL)
    else:
        logging.getLogger().setLevel(logging.INFO)
    logging.info("debug level set dynamically to: %s", (debug_level))

logging.debug("config file '%s'", (config_file))

# read config settings
# backup_path = config.get('backup_path', "json")
backup_path = replace_all_placeholders(
    "{%s/backup_path}" % (config_context), config, ""
)
logging.debug("config read - 'backup_path': %s", (backup_path))
create_dir = replace_all_placeholders("{%s/create_dir}" % (config_context), config, 1)
logging.debug("config read - 'create_dir': %s", (create_dir))

# get event payload
with open(json_file, "r") as jsf:
    payload = json.loads(jsf.read())

# backup evenry json
try:
    logging.debug("backup path set: %s", backup_path)

    # try to create dir
    if not os.path.exists(backup_path):
        logging.debug("missing dir #1")
        if create_dir == "1":
            try:
                os.mkdir(backup_path)
            except OSError:
                logging.error("Creation of the directory %s failed" % backup_path)
            else:
                logging.debug("Successfully created the directory %s " % backup_path)

    # check if dir exists (before or after creation)
    if os.path.exists(backup_path):
        # pylint: disable=line-too-long
        backup_file = (
            backup_path
            + "/"
            + time.strftime("%Y%m%d-%H%M%S")
            + "-"
            + event_type
            + ".json"
        )

        logging.debug("backup file set: %s", backup_file)
        with open(backup_file, "w") as this_payloadexport:
            json.dump(payload, this_payloadexport)
            this_payloadexport.close()

        logging.info("Backing up event JSON completed successfully.")
    else:
        logging.error("Missing backup dir. Backup of of event JSON failed.")

except Exception:
    logging.error("Backup up of event JSON failed.")
